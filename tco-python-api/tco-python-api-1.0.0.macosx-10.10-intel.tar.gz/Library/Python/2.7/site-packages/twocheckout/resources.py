from twocheckout.request import Request

def _map_node_to_resource(node):
    resource_map = {
        'sale': Sale,
        'sales': Sale,
        'invoice': Invoice,
        'invoices': Invoice,
        'item': Item,
        'items': Item,
        'subscription': Subscription,
        'subscriptions': Subscription,
        'refund': Refund,
        'refunds': Refund,
        'customer': Customer,
        'customers': Customer,
        'payment_method': PaymentMethod,
        'payment_methods': PaymentMethod,
        'address': Address,
        'billing_address': Address,
        'shipping_addresses': Address,
        'comments': Comment,
        'pagination': Pagination
    }
    return resource_map.get(node, Resource)

class Resource(object):
    def __init__(self, *args):
        for (key, value) in args[0].iteritems():
            klazz = _map_node_to_resource(key)
            if isinstance(value, list):
                value = [klazz(i) for i in value]
            elif isinstance(value, dict):
                value = klazz(value)
            setattr(self, key, value)

class Sale(Resource):
    @classmethod
    def create(cls, params=None):
        params = {'sale': params}
        return Sale(Request.call('post', 'sales', params)['sale'])

    @classmethod
    def find(cls, sale_id):
        path = 'sales/%s' % str(sale_id)
        return Sale(Request.call('get', path)['sale'])

    @classmethod
    def list(cls, params=None):
        return Response(Request.call('get', 'sales', params))

class Invoice(Resource):
    @classmethod
    def find(cls, invoice_id):
        path = 'invoices/%s' % str(invoice_id)
        return Invoice(Request.call('get', path)['invoice'])

    @classmethod
    def list(cls, params=None):
        return Response(Request.call('get', 'invoices', params))

    @classmethod
    def refund(cls, invoice_id, params=None):
        params = {'refund': params}
        path = 'invoices/%s/refund' % str(invoice_id)
        return Invoice(Request.call('post', path, params)['invoice'])

    @classmethod
    def capture(cls, invoice_id):
        path = 'invoices/%s/capture' % str(invoice_id)
        return Invoice(Request.call('post', path)['invoice'])

class Item(Resource):
    pass

class Refund(Resource):
    pass

class Subscription(Resource):
    @classmethod
    def stop(cls, subscription_id):
        path = 'subscriptions/%s/stop' % str(subscription_id)
        return Subscription(Request.call('post', path)['subscription'])

    @classmethod
    def find(cls, subscription_id):
        path = 'subscriptions/%s' % str(subscription_id)
        return Subscription(Request.call('get', path)['subscription'])

class Customer(Resource):
    @classmethod
    def create(cls, params=None):
        params = {'customer': params}
        return Customer(Request.call('post', 'customers', params)['customer'])

    @classmethod
    def find(cls, customer_id):
        path = 'customers/%s' % customer_id
        return Customer(Request.call('get', path)['customer'])

    @classmethod
    def list(cls, params=None):
        return Response(Request.call('get', 'customers', params))

    @classmethod
    def update(cls, customer_id, params=None):
        params = {'customer': params}
        path = 'customers/%s' % customer_id
        return Customer(Request.call('put', path, params)['customer'])

    @classmethod
    def delete(cls, customer_id):
        path = 'customers/%s' % customer_id
        return Response(Request.call('delete', path))

class PaymentMethod(Resource):
    @classmethod
    def create(cls, customer_id, params=None):
        params = {'payment_method': params}
        path = 'customers/%s/payment_methods' % customer_id
        return PaymentMethod(Request.call('post', path, params)['payment_method'])

    @classmethod
    def find(cls, customer_id, payment_method_id):
        path = 'customers/%s/payment_methods/%s' % (customer_id, payment_method_id)
        return PaymentMethod(Request.call('get', path)['payment_method'])

    @classmethod
    def list(cls, customer_id, params=None):
        path = 'customers/%s/payment_methods' % customer_id
        return Response(Request.call('get', path, params))

    @classmethod
    def default(cls, customer_id, payment_method_id):
        path = 'customers/%s/payment_methods/%s/default' % (customer_id, payment_method_id)
        return PaymentMethod(Request.call('post', path)['payment_method'])

    @classmethod
    def delete(cls, customer_id, payment_method_id):
        path = 'customers/%s/payment_methods/%s' % (customer_id, payment_method_id)
        return Response(Request.call('delete', path))

class Address(Resource):
    pass

class Comment(Resource):
    pass

class Pagination(Resource):
    pass

class Response(Resource):
    pass
